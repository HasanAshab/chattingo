@Library('Shared') _ // https://github.com/HasanAshab/Jenkins_SharedLib
pipeline {
    // WARN: Never use master node for
    // running pipeline in production
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
        durabilityHint('PERFORMANCE_OPTIMIZED')
        preserveStashes(buildCount: 5)
    }

    tools {
        maven 'maven:3.9'
    }

    parameters {
        string(name: 'GIT_BRANCH', defaultValue: '', description: 'Branch name of the commit')
        string(name: 'SHORT_SHA', defaultValue: '', description: 'Short SHA of the commit')
    }

    environment {
        SERVICE_NAME = 'backend'

        DOCKER_CREDENTIALS_ID = 'docker'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE_BASE = 'chattingo'

        GITHUB_SSH_CREDENTIALS_ID = 'github-ssh-key'

        VPS_USER = 'root'
        VPS_HOST = '72.60.111.27'
        VPS_SSH_CREDENTIALS_ID = 'vps-ssh-key'
    }

    stages {
        stage('Validate Params') {
            steps {
                script {
                    if (!params.GIT_BRANCH?.trim()) {
                        error "Parameter GIT_BRANCH is required but not provided!"
                    }
                    if (!params.SHORT_SHA?.trim()) {
                        error "Parameter SHORT_SHA is required but not provided!"
                    }
                    echo "GIT_BRANCH: ${params.GIT_BRANCH}"
                    echo "SHORT_SHA: ${params.SHORT_SHA}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh 'mvn install -DskipTests'
                }
            }
        }

        stage('CI') {
            parallel {
                stage('Run Lint') {
                    steps {
                        dir(env.SERVICE_NAME) {
                            sh 'npm run lint'
                        }
                    }
                }

                stage('Run Tests') {
                    steps {
                        dir(env.SERVICE_NAME) {
                            sh 'mvn test'
                        }
                    }
                }

                stage("Scan Filesystem [Trivy]") {
                    steps {
                        dir(env.SERVICE_NAME) {
                            script {
                                echo "Scanning filesystem for vulnerabilities..."
                                // trivy_scan()
                            }
                        }
                    }
                }

                stage("Check Dependencies [OWASP]") {
                    steps {
                        dir(env.SERVICE_NAME) {
                            script {
                                echo "Checking dependencies for vulnerabilities..."
                                // owasp_dependency()
                            }
                        }
                    }
                }

                stage("Analyze Code Quality [SonarQube]") {
                    steps {
                        dir(env.SERVICE_NAME) {
                            script {
                                echo "Analyzing code quality..."
                                // sonarqube_analysis("sonarqube-server", env.SERVICE_NAME, env.SERVICE_NAME)
                                // sonarqube_code_quality()
                            }
                        }
                    }
                }

                stage('Build and Scan Docker [Trivy]') {
                    steps {
                        script {
                            docker_build_and_scan(
                                CredId: env.DOCKER_CREDENTIALS_ID,
                                ImageBase: env.DOCKER_IMAGE_BASE,
                                ImageSuffix: env.SERVICE_NAME,
                                Tags: [params.SHORT_SHA, 'latest'],
                            )
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
            }
            steps {
                script {
                    docker_push(
                        CredId: env.DOCKER_CREDENTIALS_ID,
                        Registry: env.DOCKER_REGISTRY,
                        ImageBase: env.DOCKER_IMAGE_BASE,
                        ImageSuffix: env.SERVICE_NAME,
                        Tags: [params.SHORT_SHA, 'latest'],
                    )
                }
            }
        }

        stage('Update Compose Repo') {
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
            }
            steps {
                dir('chattingo-compose') {
                    git branch: 'main',
                          url: 'git@github.com:HasanAshab/chattingo-compose.git',
                          credentialsId: env.GITHUB_SSH_CREDENTIALS_ID

                    // Update image tag
                    sh """
                    chmod +x ./update_tag.sh
                    ./update_tag.sh ${env.SERVICE_NAME} ${params.SHORT_SHA}

                    git config user.email "ci@jenkins"
                    git config user.name "Jenkins CI"
                    git commit -am "ci: update ${env.SERVICE_NAME} image tag to ${params.SHORT_SHA}"
                    """

                    // Change remote and push changes
                    withCredentials([sshUserPrivateKey(credentialsId: env.GITHUB_SSH_CREDENTIALS_ID, keyFileVariable: 'SSH_KEY')]) {
                        sh """
                        GIT_SSH_COMMAND="ssh -i $SSH_KEY -o StrictHostKeyChecking=no" git push origin HEAD:main
                        """
                    }
                }
            }
        }

        stage('Deploy to VPS') {
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
            }
            steps {
                sshagent([env.VPS_SSH_CREDENTIALS_ID]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${env.VPS_USER}@${env.VPS_HOST} '
                            cd ./chattingo-compose
                            chmod +x ./redeploy.sh
                            ./redeploy.sh
                        '
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success { echo '✅ Pipeline succeeded!' }
        failure { echo '❌ Pipeline failed!' }
    }
}
